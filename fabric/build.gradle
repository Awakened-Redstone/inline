plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "me.modmuss50.mod-publish-plugin" version "0.5.1"
}

archivesBaseName = "${archivesBaseName}-fabric"

architectury {
    platformSetupLoomIde()
    fabric()
}


loom {
    runs {
        client {
            programArgs(["--username", "samsthenerd", "--uuid", "6f07899c-2b26-4221-8033-1f53f7a0e111"])
        }
    }
}

tasks {
    tasks.withType(Jar).configureEach {
        exclude("architectury.common.json")
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
}

tasks.register("jenkinsArtifacts", Copy){
    from remapJar, remapSourcesJar, javadocJar
    into "${rootDir.toPath()}/build/jenkinsArtifacts"
}

build {
    dependsOn tasks.named("jenkinsArtifacts")
}


configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
	modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modApi ("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config_version}"){
        exclude(group: "net.fabricmc.fabric-api")
    }
    modImplementation ("com.terraformersmc:modmenu:${mod_menu_version}"){
        transitive(false)
    }

    runtimeOnly(include("io.github.llamalad7:mixinextras-fabric:${mixinExtrasVersion}"))

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = archivesBaseName
            from components.java
        }
    }

    repositories {
        maven {
            url System.getenv("local_maven_url")
        }
    }
}


publishMods {
    file = remapJar.archiveFile
    additionalFiles.from(sourcesJar.archiveFile)
    changelog = trimChangelog(file("$rootDir/changelog.md").text)
    type = STABLE
    modLoaders.add("fabric")
    modLoaders.add("quilt")

    version = project.version + "-fabric"
    displayName = "Inline" + " " + project.version + " [Fabric]"
 
    curseforge {
        accessToken = providers.environmentVariable("CURSEFORGE_API_KEY")
        projectId = project.inline_curseforge_id
        minecraftVersions.add(project.minecraft_version)
        requires{
            slug = "fabric-api"
        }
        requires{
            slug = "cloth-config"
        }
    }

    modrinth {
        accessToken = providers.environmentVariable("MODRINTH_API_KEY")
        projectId = project.inline_modrinth_slug
        minecraftVersions.add(project.minecraft_version)
        
        requires{
            slug = "fabric-api"
        }
        requires{
            slug = "cloth-config"
        }
    }

    github {
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        repository = providers.environmentVariable("GITHUB_REPOSITORY")
        commitish = providers.environmentVariable("GIT_COMMIT")
        tagName = "release/${project.version}"
    }
}