plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "me.modmuss50.mod-publish-plugin" version "0.3.3"
}

archivesBaseName = "${archivesBaseName}-forge"

architectury {
    platformSetupLoomIde()
    forge()

}

loom {
    // accessWidenerPath = project(":common").loom.accessWidenerPath


    forge {
        // convertAccessWideners = true
        // extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
        // uncomment *and add the file* if we want forge-only mixins?
        mixinConfig "inline.mixins.json"
        mixinConfig "inline-common.mixins.json"
    }
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
}

tasks {
    tasks.withType(Jar).configureEach {
        exclude("architectury.common.json")
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
}

tasks.register("jenkinsArtifacts", Copy){
    from remapJar, remapSourcesJar, javadocJar
    into "${rootDir.toPath()}/build/jenkinsArtifacts"
}

build {
    dependsOn tasks.named("jenkinsArtifacts")
}


configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

// kotlin for forge - needed for hex
// apply from: "https://raw.githubusercontent.com/thedarkcolour/KotlinForForge/site/thedarkcolour/kotlinforforge/gradle/kff-${kotlinForForgeVersion}.gradle"

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"
    modApi "me.shedaniel.cloth:cloth-config-forge:${rootProject.cloth_config_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    modCompileOnly(group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2') // for @Nonnull

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    runtimeOnly(include("com.github.llamalad7.mixinextras:mixinextras-forge:${mixinExtrasVersion}"))

}

sourceSets {
    main {
        resources {
            source(project(":common").sourceSets.main.resources)
        }
    }
}

processResources {
    inputs.property "mod_version", project.mod_version

    filesMatching("META-INF/mods.toml") {
        expand "mod_version": project.mod_version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = archivesBaseName
            from components.java
        }
    }

    repositories {
        maven {
            url System.getenv("local_maven_url")
        }
    }
}


publishMods {
    file = remapJar.archiveFile
    additionalFiles.from(sourcesJar.archiveFile)
    changelog = trimChangelog(file("$rootDir/changelog.md").text)
    type = STABLE
    modLoaders.add("forge")

    version = project.version + "-forge"
    displayName = "Inline" + " " + project.version + " [Forge]"
 
    curseforge {
        accessToken = providers.environmentVariable("CURSEFORGE_API_KEY")
        projectId = "971167"
        minecraftVersions.add("1.20.1")
        requires {
            slug = "architectury-api"
        }
    }

    modrinth {
        accessToken = providers.environmentVariable("MODRINTH_API_KEY")
        projectId = "fin1PX4m"
        minecraftVersions.add("1.20.1")

        requires {
            // architectury api
            // id = "XV72M5Gg"
            slug = "architectury-api"
        }
    }
}